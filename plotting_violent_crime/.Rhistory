library(data.table)  # for efficient data
library(RPostgreSQL) # to get data from PostgreSQL
library(rgdal)       # for spatial transformation
library(mapproj)     # necessary to ensure consistent coordinate mapping
library(ggplot2)
library(dplyr)
library(magrittr)
library(lubridate)
library(viridis)     # colour theme
library(scales)
library(data.table)  # for efficient data
install.pacl
install.packages("data.table")
library(RPostgreSQL) # to get data from PostgreSQL
install.packages("RPostgrSQL")
install.packages("RPostgreSQL")
library(data.table)  # for efficient data
library(RPostgreSQL) # to get data from PostgreSQL
library(rgdal)
install.packages("rgdal")
library(data.table)  # for efficient data
library(RPostgreSQL) # to get data from PostgreSQL
library(rgdal)
library(data.table)  # for efficient data
library(RPostgreSQL) # to get data from PostgreSQL
library(rgdal)
library(data.table)  # for efficient data
library(RPostgreSQL) # to get data from PostgreSQL
library(rgdal)       # for spatial transformation
library(mapproj)
install.packages("mapproj")
library(data.table)  # for efficient data
library(RPostgreSQL) # to get data from PostgreSQL
library(rgdal)       # for spatial transformation
library(mapproj)     # necessary to ensure consistent coordinate mapping
library(ggplot2)
library(dplyr)
install.packages("dplyr")
library(data.table)  # for efficient data
library(RPostgreSQL) # to get data from PostgreSQL
library(rgdal)       # for spatial transformation
library(mapproj)     # necessary to ensure consistent coordinate mapping
library(ggplot2)
library(dplyr)
library(data.table)  # for efficient data
library(RPostgreSQL) # to get data from PostgreSQL
library(rgdal)       # for spatial transformation
library(mapproj)     # necessary to ensure consistent coordinate mapping
library(ggplot2)
library(dplyr)
library(data.table)  # for efficient data
library(RPostgreSQL) # to get data from PostgreSQL
library(rgdal)       # for spatial transformation
library(mapproj)     # necessary to ensure consistent coordinate mapping
library(ggplot2)
library(dplyr)
library(magrittr)
library(data.table)  # for efficient data
library(RPostgreSQL) # to get data from PostgreSQL
library(rgdal)       # for spatial transformation
library(mapproj)     # necessary to ensure consistent coordinate mapping
library(ggplot2)
library(dplyr)
library(magrittr)
library(lubridate)
install.packages("lubridate")
install.packages("viridis")
install.packages("scales")
install.packages("scales")
library(data.table)  # for efficient data
library(RPostgreSQL) # to get data from PostgreSQL
library(rgdal)       # for spatial transformation
library(mapproj)     # necessary to ensure consistent coordinate mapping
library(ggplot2)
library(dplyr)
library(magrittr)
library(lubridate)
library(viridis)     # colour theme
library(scales)
# load custom functions
source("helper_visualisation.R")
source("feature_helperfunctions.R")
library(data.table)  # for efficient data
library(RPostgreSQL) # to get data from PostgreSQL
library(rgdal)       # for spatial transformation
library(mapproj)     # necessary to ensure consistent coordinate mapping
library(ggplot2)
library(dplyr)
library(magrittr)
library(lubridate)
library(viridis)     # colour theme
library(scales)
# load custom functions
source("helper_visualisation.R")
library(data.table)  # for efficient data
library(RPostgreSQL) # to get data from PostgreSQL
library(rgdal)       # for spatial transformation
library(mapproj)     # necessary to ensure consistent coordinate mapping
library(ggplot2)
library(dplyr)
library(magrittr)
library(lubridate)
library(viridis)     # colour theme
library(scales)
# load custom functions
source("helper_visualisation.R")
source("feature_helperfunctions.R")
# define analysis timeframe
start_day = as.Date("2015-06-01")
end_day   = as.Date("2015-11-29")
time_window = unique(isoweek(seq(start_day, end_day, by = "days")))
# Load and manipulate data ----------------------------------------------------
# load crime data
con1 = dbConnect(dbDriver("PostgreSQL"),
dbname = "crime-data",
user = "root",
host = "localhost")
start_day = as.Date("2015-06-01")
end_day   = as.Date("2015-11-29")
con1 = dbConnect(dbDriver("PostgreSQL"),
dbname = "crime-data",
user = "root",
host = "localhost")
crime_data = dbGetQuery(con1, "SELECT id, cmplnt_fr_dt,
ofns_desc, ctlabel,
loc_gid FROM crimes_sub"); setDT(crime_data)
